name: Deploy

on:
  push:
  
  workflow_dispatch:    

env:
  LOCATION: 'eastus'
  RESOURCE_GROUP_NAME: 'rg-app-service-php-demo'
  FILESHARE_NAME: 'filephpdisk'

jobs:

  create-azure-resources:

    runs-on: ubuntu-latest

    outputs:
      webPhpAppName: ${{ steps.armDeployment.outputs.webName }}
      webNodeName: ${{ steps.armDeployment.outputs.webNodeName }}
      storageName: ${{ steps.armDeployment.outputs.storageName }}
      storageKey: ${{ steps.armDeployment.outputs.storageKey }}

    steps:

      - uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create -n ${{ env.RESOURCE_GROUP_NAME }} -l ${{ env.LOCATION }}

      - name: Deploy Azure Resources
        id: armDeployment
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ./bicep/main.bicep
          parameters: location=${{ env.LOCATION }} fileShareName=${{ env.FILESHARE_NAME }}   
          
      - name: output web app name
        run: |
          echo ${{ steps.armDeployment.outputs.webName }}

      - uses: gliech/create-github-secret-action@v1
        with:
          name: STORAGE_KEY
          value: ${{ steps.armDeployment.outputs.storageKey }}
          pa_token: ${{ secrets.PA_TOKEN }}          
  
  build-and-deploy-php-app:
    
    needs: create-azure-resources

    runs-on: ubuntu-latest
    
    env:
      WEBAPP_PACKAGE_DIR: 'src/php'
    
    steps:

      - uses: actions/checkout@master

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure WebApp'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ needs.create-azure-resources.outputs.webPhpAppName }}
          package: ${{ env.WEBAPP_PACKAGE_DIR }}
              
  build-and-deloy-node-app:
    
    needs: create-azure-resources

    runs-on: ubuntu-latest

    env:
      AZURE_WEBAPP_PACKAGE_PATH: 'src/node'
      NODE_VERSION: '14.x'

    steps:

      - uses: actions/checkout@master

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: npm install
        run: |
          npm install
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} 

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure WebApp'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.create-azure-resources.outputs.webNodeName }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}                

  mount-file-share:
    
    needs: [create-azure-resources,build-and-deploy-php-app,build-and-deloy-node-app]

    runs-on: ubuntu-latest

    steps:        

      - name: mount storage php
        run: |
          {
            az webapp config storage-account add --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ needs.create-azure-resources.outputs.webPhpAppName }} --custom-id strshare --storage-type AzureFiles --share-name ${{ env.FILESHARE_NAME }} --account-name ${{ needs.create-azure-resources.outputs.storageName }} --access-key ${{ secrets.STORAGE_KEY }} --mount-path /var/www/html/app          
          } || {
            az webapp config storage-account update --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ needs.create-azure-resources.outputs.webPhpAppName }} --custom-id strshare --storage-type AzureFiles --share-name ${{ env.FILESHARE_NAME }} --account-name ${{ needs.create-azure-resources.outputs.storageName }} --access-key ${{ secrets.STORAGE_KEY }} --mount-path /var/www/html/app          
          }
          
      - name: mount storage node
        run: |
          {
            az webapp config storage-account add --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ needs.create-azure-resources.outputs.webNodeName }} --custom-id strshare --storage-type AzureFiles --share-name ${{ env.FILESHARE_NAME }} --account-name ${{ needs.create-azure-resources.outputs.storageName }} --access-key ${{ secrets.STORAGE_KEY }} --mount-path /var/www/html/app          
          } || {
            az webapp config storage-account update --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ needs.create-azure-resources.outputs.webNodeName }} --custom-id strshare --storage-type AzureFiles --share-name ${{ env.FILESHARE_NAME }} --account-name ${{ needs.create-azure-resources.outputs.storageName }} --access-key ${{ secrets.STORAGE_KEY }} --mount-path /var/www/html/app          
          }          
